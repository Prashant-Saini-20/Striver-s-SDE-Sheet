class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode* rev=reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return rev;
    }
    ListNode* revKGroup(ListNode* head,int k,int l){
        if(k>l) return head;
        if(k==l) return reverseList(head);
        
        int c=1;
        ListNode* temp=head;
        ListNode* help=temp->next;
        while(c < k){
            temp=temp->next;
            c++;
        }
        ListNode* k_rev=revKGroup(temp->next,k,l-k);
        temp->next=NULL;
        ListNode* newHead=reverseList(head);
        head->next=k_rev;
        return newHead;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        int l=0;
        while(temp){
            temp=temp->next;
            l++;
        }
        return revKGroup(head,k,l);
    }
};
