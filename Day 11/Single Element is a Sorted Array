class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        /*     USING XOR
        int n=nums.size(),ans=0;
        for(int i=0;i<n;i++){
            ans=ans^nums[i];
        }
        return ans;       */
        
        //     USING BINARY SEARCH
        int low=0,high=nums.size()-1;
        while(low <= high){                   //  mid=0 is only check because
                                              //  right side is handled automatically
            int mid=(low+high)/2;
            if(low==high || mid==0) return nums[mid];
            
            bool fir_ins=false,sec_ins=false;
            bool eve_pos=mid%2==0;
            bool odd_pos=mid%2==1;
            
            if(nums[mid]==nums[mid+1])
                fir_ins=true;
            else if(nums[mid]==nums[mid-1])
                sec_ins=true;
            else
                return nums[mid];
        
            if((eve_pos && fir_ins)||(odd_pos && sec_ins)){
                low=mid+1;
            }
            else if((odd_pos && fir_ins)||(eve_pos && sec_ins))
                high=mid-1;  
        }
        return 0;
    }
};
